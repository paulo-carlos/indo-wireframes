import * as React from "react"
import {
    Frame,
    useCycle,
    addPropertyControls,
    ControlType,
    RenderTarget,
} from "framer"
//import { GenericTextFrame } from "./GenericTextFramer"
// Open Preview (CMD + P)
// API Reference: https://www.framer.com/api

export function Animated_Numbers(props) {
    const [currentNum, setNum] = React.useState(
        props.direction == "Up" ? 0 : props.countTo
    )
    const nextNumDuration =
        Math.floor((props.duration / (props.countTo / props.step)) * 1000)

  

    React.useEffect(() => {
        setNum(props.direction == "Up" ? 0 : props.countTo)
    }, [props.direction])

    React.useEffect(()=> {
        setTimeout(() => {
            console.log("Start")
            if (props.direction == "Up") {
                nextNum(props.step)
            } else {
                nextNum(props.countTo - props.step)
            }
        }, nextNumDuration)
    }, [props])

    function nextNum(newNum: number) {
        if (props.direction == "Up") {
            if (newNum <= props.countTo) {
                console.log({ nextNumDuration })
                setNum(newNum)
                setTimeout(() => {
                    nextNum(getNumber(newNum + props.step))
                }, nextNumDuration)
            }
        } else {
            if (newNum >= 0) {
                console.log({ newNum })
                setNum(newNum)
                setTimeout(() => {
                    nextNum(getNumber(newNum - props.step))
                }, nextNumDuration)
            }
        }
    }

    function getNumber(num){
        const normalizeStep = 1 / props.step
        const calcNum = Math.round( num * normalizeStep ) / normalizeStep
        console.log({calcNum})
       return calcNum
    }

    const textStyle = {
        height: "100%",
        width: "100%",
        background: "none",
        fontSize: props.fontSize,
        textAlign: props.textAlign,
        justifyContent: "center",
        alignItems: "center",
        color: props.hex,
        fontFamily: "IBM Plex Sans",
    }

    if (RenderTarget.current() != RenderTarget.preview) {
        return <Frame style={textStyle}>{props.countTo}</Frame>
    } else {
        return <Frame style={textStyle}>{currentNum}</Frame>
    }
}

addPropertyControls(Animated_Numbers, {
    duration: {
        type: ControlType.Number,
        min: 0,
        defaultValue: 1,
        title: "Duration",
    },
    delay: {
        type: ControlType.Number,
        min: 0,
        defaultValue: 1,
        title: "Delay",
    },
    countTo: {
        type: ControlType.Number,
        title: "Count To",
        defaultValue: 10,
        step: 0.000001
    },
    step: {
        type: ControlType.Number,
        title: "Step",
        defaultValue: 1,
        min: 0.000001,
        step: 0.000001,
    },
    fontSize: {
        type: ControlType.Enum,
        options: [
            "12px",
            "14px",
            "16px",
            "18px",
            "20px",
            "24px",
            "28px",
            "32px",
            "36px",
            "42px",
            "48px",
            "54px",
            "60px",
            "68px",
            "76px",
            "84px",
            "92px",
        ],
        optionTitles: [
            "12px - Small",
            "14px - Body",
            "16px - Size 1",
            "18px - Size 2",
            "20px - Size 3",
            "24px - Size 4",
            "28px - Size 5",
            "32px - Size 6",
            "36px - Size 7",
            "42px - Size 8",
            "48px - Size 9",
            "54px - Size 10",
            "60px - Size 11",
            "68px - Size 12",
            "76px - Size 13",
            "84px - Size 14",
            "92px - Size 15",
        ],
        title: "Size",
        defaultValue: "14px",
    },
    hex: {
        type: ControlType.Color,
        title: "Color",
        defaultValue: "#253746",
    },
    direction: {
        type: ControlType.SegmentedEnum,
        title: "Direction",
        options: ["Up", "Down"],
        defaultValue: "Up",
    },
    //...GenericTextFrame.propertyControls
    //Count from
    //Count to
    //Count step
})
